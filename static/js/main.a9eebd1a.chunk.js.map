{"version":3,"sources":["firebase.tsx","components/TextInput.tsx","components/Button.tsx","colors.js","components/LoginPage.tsx","components/BarGraph.tsx","components/DownloadScreen.tsx","components/NumberSlider.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","Container","styled","input","TextInput","props","value","placeholder","type","onChange","setValue","div","Button","onClick","clicked","style","background","color","textColor","pointerEvents","colors","primary","darkPurple","purple","darkBlue","blue","green","red","yellow","pink","black","lightRed","bcryptjs","require","LoginWindow","RegisterWindow","LoginPage","useState","loginOpen","setLoginOpen","users","setUsers","loginUsername","setLoginUsername","loginPassword","setLoginPassword","loginError","setLoginError","regUsername","setRegUsername","regPassword","setRegPassword","regError","setRegError","loading","setLoading","loginLoading","setLoginLoading","registerDone","setRegisterDone","timer","useEffect","setTimeout","usersRef","ref","onValue","snapshot","exists","val","newUsernames","key","username","push","clearTimeout","fontSize","fontWeight","marginBottom","e","target","height","width","display","alignItems","justifyContent","cursor","marginTop","top","position","opacity","a","userCorrect","i","length","hashIt","salt","password","setLoggedIn","usernameUsed","forEach","el","getSalt","passHash","genSalt","hash","hashed","BarGraph","data","labels","datasets","backgroundColor","average","options","maintainAspectRatio","plugins","legend","title","text","scales","y","min","Math","floor","max","undefined","Background","Window","Heading","Content","ContentBoxes","Labels","TextBoxes","csvData","DownloadScreen","d","Date","start","setStart","end","setEnd","startString","setStartString","endString","setEndString","error","setError","csv","setCsv","newStartString","getDateString","newEndString","close","filename","asyncOnClick","done","calculateCSVData","border","outline","yearStr","getFullYear","monthStr","parseInt","getMonth","toString","dayStr","getDate","sensorsRef","get","sens","newCsv","concat","sensTimeStr","str","split","senseTime","co","nir","clear","f1","f2","f3","f4","f5","f6","f7","f8","time","newRow","console","log","NumberSlider","heading","setVal","step","marginLeft","colorsArr","NavBar","NavContent","WaveContentContainer","WaveContent","WaveGraphContainer","CsvButton","DateContainer","Dashboard","downloadOpen","setDownloadOpen","pump1","setPump1","setPump1Key","pump2","setPump2","setPump2Key","pumpsRef","pumps","pump","paddingLeft","lastUpdated","currentTime","toISOString","substring","getHours","getMinutes","getSeconds","paddingRight","logout","waveSamples","map","prop","flexShrink","name","samples","largestWave","coAverage","coSamples","setPumps","marginRight","borderRadius","serverOnline","pumpName","set","url","waveSampleTemp","App","loggedIn","setCoSamples","setCoAverage","setWaveSamples","setLargestWave","setLastUpdated","setCurrentTime","setServerOnline","cnt","newCoSamples","newWaves","senseArray","lastTime","getTime","newCo","setWave","sampleMax","index","setCo","updateCurrentTime","checkServer","fetch","method","then","response","json","status","catch","err","timeStr","arr","total","avg","num","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9eebd1a.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\n/*const firebaseConfig =  {\r\n    apiKey: \"AIzaSyArcHR-u520-pvwa75P9dTqmn9Q-0xuQfk\",\r\n    authDomain: \"testsensor-50e80.firebaseapp.com\",\r\n    databaseURL: \"https://testsensor-50e80-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"testsensor-50e80\",\r\n    storageBucket: \"testsensor-50e80.appspot.com\",\r\n    messagingSenderId: \"15455856559\",\r\n    appId: \"1:15455856559:web:2b0ce1e3f3a8fd206b315a\"\r\n};\r\n*/\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBWCGso7ConB4uAv-j-QUFCg4wWHwzo_Ng\",\r\n    authDomain: \"mysensors-b8cfe.firebaseapp.com\",\r\n    databaseURL: \"https://mysensors-b8cfe-default-rtdb.firebaseio.com\",\r\n    projectId: \"mysensors-b8cfe\",\r\n    storageBucket: \"mysensors-b8cfe.appspot.com\",\r\n    messagingSenderId: \"265785378277\",\r\n    appId: \"1:265785378277:web:e3f320f541eef441f15b0c\",\r\n    measurementId: \"G-8RMGJP5T1Y\"\r\n  };\r\n  \r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst db = getDatabase(app);\r\n\r\nexport default db","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.input`\r\n  height: 100%;\r\n  width: 100%;\r\n  outline: none;\r\n  background: transparent;\r\n  border: 2px solid darkgrey;\r\n  border-radius: 5px;\r\n  padding: 5px 7px;\r\n  margin: 0px;\r\n`\r\n\r\ninterface propTypes {\r\n    value: any\r\n    placeholder: string\r\n    type: string\r\n    setValue: any\r\n}\r\n\r\n\r\nfunction TextInput(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container\r\n        value={props.value}\r\n        placeholder={props.placeholder}\r\n        type={props.type}\r\n        onChange={props.setValue}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TextInput;","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Container = styled.div`\r\n  padding: 7px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`\r\n\r\ninterface propTypes {\r\n    value: string\r\n    color: string\r\n\r\n    clicked?: any\r\n    textColor?:string\r\n}\r\n\r\n\r\nfunction Button(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container\r\n        \r\n        onClick={props.clicked}\r\n        style={{\r\n            background: props.color || 'lightgrey',\r\n            color: props.textColor || 'black',\r\n            pointerEvents: props.clicked ? 'auto' : 'none'\r\n        }}\r\n    >\r\n        {props.value}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n","const colors = {\r\n    primary: '#FF6F3C',\r\n\r\n    darkPurple: '#3E2F5B',\r\n    purple: '#E8C7DE',\r\n\r\n    darkBlue: '#345995',\r\n    blue: '#86BBD8',\r\n    green: '#DCF2B0',\r\n    red: '#880D1E',\r\n    yellow: '#FFCF00',\r\n    pink: '#CC59D2',\r\n    black: '#262626',\r\n    lightRed: '#EF2917'\r\n\r\n}\r\n\r\nexport default colors","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport db from '../firebase';\r\nimport { ref, child, get, onValue, push } from \"firebase/database\";\r\nimport TextInput from './TextInput';\r\nimport Button from './Button';\r\nimport colors from '../colors';\r\nconst bcryptjs = require('bcryptjs');\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  background: #eeeeee;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst LoginWindow = styled.div`\r\n  padding: 20px 20px;\r\n  min-width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\nconst RegisterWindow = styled.div`\r\n  position: relative;\r\n  padding: 20px 20px;\r\n  min-width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\ninterface propTypes {\r\n  setLoggedIn: any\r\n}\r\n\r\nfunction LoginPage(props: propTypes) {\r\n  const [loginOpen, setLoginOpen] = useState(true)\r\n\r\n  const [users, setUsers] = useState<any[]>([])\r\n\r\n\r\n  const [loginUsername, setLoginUsername] = useState('')\r\n  const [loginPassword, setLoginPassword] = useState('')\r\n  const [loginError, setLoginError] = useState('')\r\n\r\n\r\n  const [regUsername, setRegUsername] = useState('')\r\n  const [regPassword, setRegPassword] = useState('')\r\n  const [regError, setRegError] = useState('')\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [loginLoading, setLoginLoading] = useState(true)\r\n\r\n  const [registerDone, setRegisterDone] = useState(false)\r\n\r\n  let timer:any = null\r\n\r\n  useEffect(() => {\r\n    timer = setTimeout(() => {\r\n      setLoginLoading(false)\r\n    }, 1000)\r\n\r\n    const usersRef = ref(db, 'Users/');\r\n\r\n    onValue(usersRef, (snapshot:any) => {\r\n      if(snapshot.exists()) {\r\n        //console.log(snapshot.val())\r\n\r\n        let users = snapshot.val()\r\n        let newUsernames = []\r\n\r\n        for (var key in users) {\r\n          let username:string = users[key]\r\n          newUsernames.push(username)\r\n        }\r\n        setUsers(newUsernames)\r\n      }\r\n\r\n      \r\n    })\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <Container>\r\n\r\n      {\r\n        loginOpen ?\r\n          <LoginWindow>\r\n          <div style={{fontSize: '25px', fontWeight: 'bold', marginBottom: '20px'}}>Login</div>\r\n\r\n          <TextInput\r\n            value={loginUsername}\r\n            setValue={setLoginUsernameHelper}\r\n            type={'text'}\r\n            placeholder={\"username\"}\r\n          />\r\n\r\n          <div style={{height: '20px'}} />\r\n\r\n          <TextInput\r\n            value={loginPassword}\r\n            setValue={setLoginPasswordHelper}\r\n            type={'password'}\r\n            placeholder={\"password\"}\r\n          />\r\n\r\n          <div style={{height: '40px', width: '100%', display:'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n          {loginError}\r\n          </div>\r\n\r\n          <Button \r\n            clicked={login}\r\n            value={'login'}\r\n            color={colors.primary}\r\n            textColor={'white'}\r\n          />\r\n\r\n          <div onClick={() => setLoginOpen(false)} style={{cursor: 'pointer', marginTop: '10px'}}>register</div>\r\n\r\n          {\r\n            loginLoading &&\r\n              <div \r\n                style={{\r\n                  top: '0px',\r\n                  position: 'absolute',\r\n                  height: '100%',\r\n                  width: '100%',\r\n                  background: 'black',\r\n                  opacity: 0.6\r\n                }} \r\n              />\r\n          }\r\n          </LoginWindow>\r\n\r\n          :\r\n\r\n          <RegisterWindow>\r\n            <div style={{fontSize: '25px', fontWeight: 'bold', marginBottom: '20px'}}>Register</div>\r\n\r\n            <TextInput\r\n              value={regUsername}\r\n              setValue={setRegUsernameHelper}\r\n              type={'text'}\r\n              placeholder={\"username\"}\r\n            />\r\n\r\n            <div style={{height: '20px'}} />\r\n\r\n            <TextInput\r\n              value={regPassword}\r\n              setValue={setRegPasswordHelper}\r\n              type={'password'}\r\n              placeholder={\"password\"}\r\n            />\r\n\r\n            <div style={{height: '40px', width: '100%', display:'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n            {regError}\r\n            </div>\r\n\r\n            <Button \r\n              clicked={register}\r\n              value={'register'}\r\n              color={colors.primary}\r\n              textColor={'white'}\r\n            />\r\n\r\n            <div onClick={() => setLoginOpen(true)} style={{cursor: 'pointer', marginTop: '10px'}}>go to login</div>\r\n\r\n            {\r\n              loading &&\r\n                <div \r\n                  style={{\r\n                    top: '0px',\r\n                    position: 'absolute',\r\n                    height: '100%',\r\n                    width: '100%',\r\n                    background: 'black',\r\n                    opacity: 0.6\r\n                  }} \r\n                />\r\n            }\r\n\r\n            {\r\n              registerDone &&\r\n                <div \r\n                  style={{\r\n                    position: 'absolute',\r\n                    height: '100%',\r\n                    width: '100%',\r\n                    top: '0px',\r\n                    background: 'white',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    fontSize: '25px',\r\n                    fontWeight: 'bold',\r\n                  }}\r\n                >\r\n                  user registered\r\n                </div>\r\n            }\r\n\r\n          </RegisterWindow>\r\n      }\r\n\r\n    </Container>\r\n  );\r\n\r\n  function setLoginUsernameHelper(e:any) {\r\n    setLoginUsername(e.target.value)\r\n  }\r\n  function setLoginPasswordHelper(e:any) {\r\n    setLoginPassword(e.target.value)\r\n  }\r\n\r\n  function setRegUsernameHelper(e:any) {\r\n    setRegUsername(e.target.value)\r\n  }\r\n  function setRegPasswordHelper(e:any) {\r\n    setRegPassword(e.target.value)\r\n  }\r\n\r\n  async function login() {\r\n    //console.log(users)\r\n    setLoginError('')\r\n\r\n    let userCorrect = false\r\n\r\n    for(let i = 0; i < users.length; i++) {\r\n      if(users[i].username === loginUsername) {\r\n        let hashLogin = await hashIt(loginPassword, users[i].salt)\r\n        //console.log(hashLogin)\r\n\r\n        if(hashLogin === users[i].password) {\r\n          userCorrect = true\r\n          props.setLoggedIn(true)\r\n          return\r\n        }\r\n      }\r\n    }\r\n\r\n    if(!userCorrect)\r\n      setLoginError('username or password incorrect')\r\n  }\r\n\r\n  async function register() {\r\n    setLoading(true)\r\n    setRegError('')\r\n\r\n    let usernameUsed = false\r\n    users.forEach((el:any) => {\r\n      if(el.username === regUsername) {\r\n        usernameUsed = true\r\n      }\r\n    })\r\n\r\n    if(usernameUsed) {\r\n      setLoading(false)\r\n\r\n      setRegError('username used')\r\n      return\r\n    }\r\n\r\n    let salt = await getSalt()\r\n    let passHash = await hashIt(regPassword, salt)\r\n\r\n    const usersRef = ref(db, 'Users/');\r\n\r\n    push(usersRef, {\r\n      username: regUsername,\r\n      password: passHash,\r\n      salt : salt\r\n    });\r\n    setRegisterDone(true)\r\n\r\n    timer = setTimeout(() => {\r\n      setLoading(false)\r\n      setLoginOpen(true)\r\n      setRegisterDone(false)\r\n    }, 2000)\r\n  }\r\n\r\n  async function getSalt() {\r\n    const salt = await bcryptjs.genSalt(6);\r\n    return salt\r\n  }\r\n  async function hashIt(password:string, salt:any){\r\n    const hashed = await bcryptjs.hash(password, salt);\r\n    return hashed\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\ninterface propTypes {\r\n    title: string\r\n    average: number\r\n    value: number\r\n    color: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\n\r\nfunction BarGraph(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Bar \r\n            data={\r\n                {\r\n                    labels: ['current', 'average'],\r\n                    datasets: [{\r\n                        backgroundColor: [props.color, 'lightgrey'],\r\n                        data: [\r\n                            props.value,\r\n                            props.average\r\n                        ]\r\n                    }]\r\n                }\r\n            } \r\n            options={\r\n                {\r\n                    maintainAspectRatio: false,\r\n                    plugins:{   \r\n                        legend: {\r\n                          display: false\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: props.title   \r\n                        }\r\n                    },\r\n                    scales: {\r\n                        y: {\r\n                            min: props.min ? Math.floor(props.min) : 0,\r\n                            max: props.max ? Math.floor(props.max) : undefined   \r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            width={100} \r\n            height={100}\r\n        />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default BarGraph;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport TextInput from './TextInput';\r\nimport Button from './Button';\r\nimport { ref, child, get } from \"firebase/database\";\r\nimport db from '../firebase';\r\nimport { CSVDownload, CSVLink } from \"react-csv\";\r\n\r\nconst Container = styled.div`\r\n    position: fixed;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst Background = styled.div`\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    background: black;\r\n    opacity: 0.6;\r\n    z-index: 0;\r\n`\r\n\r\nconst Window = styled.div`\r\n    z-index: 1;\r\n    height: 300px;\r\n    max-height: calc(100% - 100px);\r\n    max-width: calc(100% - 100px);\r\n    width: 500px;\r\n    background: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n`\r\nconst Heading = styled.div`\r\n    height: 20%;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n\r\n`\r\n\r\nconst Content = styled.div`\r\n    width: calc(100% - 100px);\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n\r\n`\r\n\r\nconst ContentBoxes = styled.div`\r\n    width: calc(50% - 20px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center\r\n`\r\n\r\nconst Labels = styled.div`\r\n    margin: 20px 0px;\r\n`\r\n\r\nconst TextBoxes = styled.div`\r\n    width: calc(100% - 20px);\r\n`\r\n\r\nconst csvData:any = [\r\n    [\"time\", \"CO2\", \"NIR\", \"Clear\", \"F1 415nm\", \"F2 445nm\", \"F3 480nm\", \"F4 515nm\", \"F5 555nm\", \"F6 590nm\", \"F7 630nm\", \"F8 680nm\"],\r\n];\r\n\r\ninterface propTypes {\r\n    close: any\r\n}\r\n\r\n\r\nfunction DownloadScreen(props:propTypes) {\r\n    const d = new Date()\r\n    const [start, setStart] = useState(d)\r\n    const [end, setEnd] = useState(d)\r\n\r\n    const [startString, setStartString] = useState('')\r\n    const [endString, setEndString] = useState('')\r\n\r\n    const [error, setError] = useState('')\r\n\r\n    const [csv, setCsv] = useState<any>(csvData)\r\n    const [downloadCsv, setDownloadCsv] = useState(false)\r\n\r\n    useEffect(() => {\r\n        let newStartString = getDateString(start)\r\n        setStartString(newStartString)\r\n        let newEndString = getDateString(end)\r\n        setEndString(newEndString)\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <Background \r\n                onClick={props.close}\r\n            />\r\n            \r\n            <Window>\r\n                <Heading>Download CSV</Heading>\r\n\r\n                <Content>\r\n                    <ContentBoxes>\r\n                        <Labels>from</Labels>\r\n                        <TextBoxes>\r\n                            <TextInput\r\n                                value={startString}\r\n                                placeholder={\"dd/mm/yy\"}\r\n                                type={'date'}\r\n                                setValue={setStartDate}\r\n                            />\r\n                        </TextBoxes>\r\n\r\n                    </ContentBoxes>\r\n\r\n                    <div style={{width: '40px'}} />\r\n\r\n                    <ContentBoxes>\r\n                        <Labels>to</Labels>\r\n                        <TextBoxes>\r\n                            <TextInput\r\n                                value={endString}\r\n                                placeholder={\"dd/mm/yy\"}\r\n                                type={'date'}\r\n                                setValue={setEndDate}\r\n\r\n                            />\r\n                        </TextBoxes>\r\n\r\n                    </ContentBoxes>\r\n\r\n                </Content>\r\n\r\n                <div style={{marginTop: '10px'}}>\r\n\r\n                    {error}\r\n                </div>\r\n\r\n                <div style={{marginTop: '20px', marginBottom: '20px'}}>\r\n                    <CSVLink \r\n                        data={csv} \r\n                        target=\"_blank\" \r\n                        filename={\"wavedata.csv\"} \r\n                        asyncOnClick={true}\r\n\r\n                        onClick={(e:any, done:any) => calculateCSVData(e, done)}\r\n                        style={{\r\n                            border: '0px',\r\n                            outline: 'none'\r\n                        }}\r\n                    >\r\n\r\n                        <Button \r\n                            value={\"download csv\"}\r\n                            color={\"lightgrey\"}\r\n                        />\r\n                    </CSVLink>\r\n                </div>\r\n                \r\n\r\n            </Window>\r\n\r\n\r\n        </Container>\r\n    );\r\n\r\n\r\n    function getDateString(val: Date) {\r\n\r\n        let yearStr = val.getFullYear()\r\n        let monthStr:string = `${parseInt(val.getMonth().toString()) + 1}`\r\n        let dayStr:string = val.getDate().toString()\r\n\r\n        if( parseInt(monthStr) < 10)\r\n            monthStr = \"0\" + monthStr\r\n        if( parseInt(dayStr) < 10)\r\n            dayStr = \"0\" + dayStr\r\n\r\n        let finalString =  yearStr+'-'+monthStr+'-'+dayStr\r\n\r\n        //console.log(finalString)\r\n        return finalString\r\n    }\r\n\r\n    function setStartDate(val: any) {\r\n        //console.log(end.getFullYear()+'-'+end.getMonth()+'-'+end.getDate())\r\n        let d = new Date(val.target.value)\r\n        setStart(d)\r\n        let newStartString = getDateString(d)\r\n        setStartString(newStartString)\r\n    }\r\n    function setEndDate(val: any) {\r\n        //console.log(val.target.value)\r\n        let d = new Date(val.target.value)\r\n        //console.log(d)\r\n        setEnd(d)\r\n        let newEndString = getDateString(d)\r\n        setEndString(newEndString)\r\n    }\r\n\r\n    async function calculateCSVData(e:any, done:any) {\r\n        const sensorsRef = ref(db, 'Readings/');\r\n\r\n        if(start > end) {\r\n            setError('start date must be before end date')\r\n\r\n            done( false )\r\n        }\r\n\r\n\r\n        let snapshot = await get( sensorsRef )\r\n        if (snapshot.exists()) {\r\n            setError('')\r\n\r\n            //console.log(snapshot.val())\r\n            let sens = snapshot.val()\r\n\r\n            let newCsv:any = [].concat(csvData)\r\n            //console.log(newCsv)\r\n\r\n            for (var key in sens) {\r\n                let sensTimeStr = sens[key][\"Time\"]\r\n                let str = sensTimeStr.split(',')\r\n                let senseTime = new Date(\"20\"+str[0])\r\n                //console.log(senseTime)\r\n\r\n                if(senseTime <= end && senseTime >= start) {\r\n                    let co:number = sens[key][\"Carbon dioxide\"]\r\n                    let nir:number = sens[key][\"NIR\"] * 100\r\n                    let clear:number = sens[key][\"Clear\"] * 100\r\n                    let f1:number = sens[key][\"F1 415nm\"] * 100\r\n                    let f2:number = sens[key][\"F2 445nm\"] * 100\r\n                    let f3:number = sens[key][\"F3 480nm\"] * 100\r\n                    let f4:number = sens[key][\"F4 515nm\"] * 100\r\n                    let f5:number = sens[key][\"F5 555nm\"] * 100\r\n                    let f6:number = sens[key][\"F6 590nm\"] * 100\r\n                    let f7:number = sens[key][\"F7 630nm\"] * 100\r\n                    let f8:number = sens[key][\"F8 680nm\"] * 100\r\n                    let time:string = sens[key][\"Time\"]\r\n                    \r\n                    let newRow:any = [\r\n                        time,\r\n                        co,\r\n                        nir,\r\n                        clear,\r\n                        f1,\r\n                        f2,\r\n                        f3,\r\n                        f4,\r\n                        f5,\r\n                        f6,\r\n                        f7,\r\n                        f8\r\n                    ]\r\n                    newCsv.push(newRow)\r\n                }\r\n            }   \r\n            console.log(newCsv.length)\r\n            if(newCsv.length > 1) {\r\n                setCsv(newCsv)\r\n                console.log('returning true')\r\n                done( true )\r\n\r\n            }\r\n\r\n            else {\r\n                console.log('returning false')\r\n                setError('no data in this time period')\r\n                done( false )\r\n\r\n            }\r\n        }\r\n\r\n        else {\r\n            console.log('returning false')\r\n            setError('server error')\r\n            done( false )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default DownloadScreen;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport colors from '../colors'\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Heading = styled.div`\r\n    font-size: 15px;\r\n    font-weight: bold;\r\n    flex-shrink: 0;\r\n`\r\n\r\nconst Content = styled.div`\r\n    width: 100%;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    align-items: center;\r\n`\r\n\r\ninterface propTypes {\r\n    setVal: any\r\n    val: number\r\n    heading: string\r\n}\r\n\r\n\r\nfunction NumberSlider(props:propTypes) {\r\n\r\n  return (\r\n    <Container>\r\n        <Heading>{props.heading}</Heading>\r\n        <Content>\r\n            {/*\r\n            <InputRange\r\n                maxValue={100}\r\n                minValue={0}\r\n                step={1}\r\n                value={props.val}\r\n                onChange={value => props.setVal(value)} \r\n                formatLabel={() => {return \"\"} }\r\n            />\r\n                */\r\n            }\r\n            <input\r\n                type=\"range\"\r\n                value={props.val}\r\n                onChange={props.setVal}\r\n                step={1}\r\n                min={0}\r\n                max={100}\r\n            />\r\n            <div style={{marginLeft: '15px'}}>\r\n                {`${props.val}%`}\r\n            </div>\r\n        </Content>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NumberSlider;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport BarGraph from './BarGraph';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport colors from '../colors'\r\nimport DownloadScreen from './DownloadScreen';\r\nimport Button from './Button';\r\nimport NumberSlider from './NumberSlider';\r\nimport db from '../firebase';\r\n\r\nimport { ref, onValue, push, set } from \"firebase/database\";\r\n\r\nconst colorsArr = [colors.darkPurple, colors.purple, colors.blue, colors.green, colors.darkBlue, colors.primary, colors.lightRed, colors.red, 'black', 'black']\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\nconst NavBar = styled.div`\r\n  height: 60px;\r\n  width: 100%;\r\n  display: flex;\r\n  background: #eeeeee;\r\n  flex-shrink: 0;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`\r\n\r\nconst NavContent = styled.div`\r\n  height: 100%;\r\n  width: calc(100% / 3);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst WaveContentContainer = styled.div`\r\n    background: #eeeeee;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n`\r\n\r\nconst WaveContent = styled.div`\r\n    width: calc(100% - 40px);\r\n    height: calc(100% - 0px);\r\n    background: white;\r\n    display: flex;\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    flex-wrap:wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n`\r\n\r\nconst WaveGraphContainer = styled.div`\r\n    width: calc(100% - 50px);\r\n    height: calc(100% - 50px);\r\n    flex-shrink: 0;\r\n`\r\n\r\nconst CsvButton = styled.div`\r\n  position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: center;\r\n    fle-direction: column;\r\n    align-items: center;\r\n    transition: all 0.3s ease;\r\n    &:hover {\r\n        color: white;\r\n        background: ${colors.primary};\r\n    }\r\n \r\n`\r\n\r\nconst DateContainer = styled.div`\r\n    font-size: 15px;\r\n`\r\ninterface propTypes {\r\n    coAverage: number\r\n    coSamples: number[]\r\n    waveSamples: any\r\n    logout: any\r\n    currentTime: Date\r\n    lastUpdated: string\r\n    largestWave: number\r\n    serverOnline: boolean\r\n}\r\n\r\n\r\nfunction Dashboard(props:propTypes) {\r\n    const [downloadOpen, setDownloadOpen] = useState(false)\r\n    const [pump1, setPump1] = useState(0)\r\n    const [pump1Key, setPump1Key] = useState(\"\")\r\n\r\n    const [pump2, setPump2] = useState(0)\r\n    const [pump2Key, setPump2Key] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        const pumpsRef = ref(db, 'Pumps/');\r\n    \r\n        onValue(pumpsRef, (snapshot:any) => {\r\n          if(snapshot.exists()) {\r\n            //console.log(snapshot.val())\r\n    \r\n            let pumps = snapshot.val()\r\n            console.log(pumps)\r\n            for (var key in pumps) {\r\n                if(pumps[key].pump === \"pump1\") {\r\n                    setPump1(pumps[key].value)\r\n                    setPump1Key(key)\r\n                }\r\n                else if(pumps[key].pump === \"pump2\") {\r\n                    setPump2(pumps[key].value)\r\n                    setPump2Key(key)\r\n                }\r\n            }\r\n          }\r\n    \r\n          \r\n        })\r\n\r\n      }, [])\r\n\r\n  return (\r\n    <Container>\r\n        <NavBar>\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'flex-start',\r\n                    paddingLeft: '20px',\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                \r\n                <DateContainer>\r\n                    Last updated: \r\n                    <div style={{fontSize: '20px'}}>\r\n                        {props.lastUpdated}\r\n                    </div>\r\n\r\n                </DateContainer>\r\n            </NavContent>\r\n\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'center',\r\n                    fontWeight: 'bold'\r\n\r\n                }}\r\n            >\r\n                <DateContainer>\r\n                    Current time: \r\n                    <div style={{fontSize: '20px'}}>\r\n                        {timeString(props.currentTime)}\r\n                    </div>\r\n\r\n                </DateContainer>\r\n            </NavContent>\r\n\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'flex-end',\r\n                    paddingRight: '20px'\r\n                }}\r\n            >\r\n                <Button \r\n                    value={'logout'}\r\n                    clicked={props.logout}\r\n                    color={colors.primary}\r\n                    textColor={'white'}\r\n                />\r\n            </NavContent>\r\n        </NavBar>\r\n        \r\n        <WaveContentContainer>\r\n            <WaveContent>\r\n                {\r\n                    props.waveSamples.map((prop:any, key:number) => \r\n                        <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <WaveGraphContainer>\r\n                                <BarGraph\r\n                                    title={prop.name}\r\n                                    average={prop.average}\r\n                                    value={prop.samples[0]}\r\n                                    color={colorsArr[key]}\r\n                                    min={0}\r\n                                    max={props.largestWave * 1.1}\r\n                                />\r\n                            </WaveGraphContainer>\r\n                        </div> \r\n                    )\r\n                }\r\n\r\n                <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <WaveGraphContainer>\r\n                        <BarGraph\r\n                            title={'CO2 Graph'}\r\n                            average={props.coAverage}\r\n                            value={props.coSamples[0]}\r\n                            color={colors.green}\r\n                        />\r\n                    </WaveGraphContainer>\r\n                </div> \r\n\r\n                <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                        \r\n                    <WaveGraphContainer>\r\n                        <div style={{height: '70%', width: '100%'}}>\r\n                            <div style={{height: '50%', width: '100%'}}>\r\n                                <NumberSlider\r\n                                    val={pump1}\r\n                                    setVal={pump1Setter}\r\n                                    heading=\"Pump 1\"\r\n                                />\r\n                            </div>\r\n                            <div style={{height: '50%', width: '100%'}}>\r\n                                <NumberSlider\r\n                                    val={pump2}\r\n                                    setVal={pump2Setter}\r\n                                    heading=\"Pump 2\"\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div style={{height: '30%', width: '100%'}}>\r\n                            <CsvButton \r\n                                onClick={() => setDownloadOpen(true)}\r\n                            >\r\n                                <div>Download</div>\r\n                                <div>CSV</div>\r\n                            </CsvButton>\r\n                        </div>\r\n                        \r\n                    </WaveGraphContainer>\r\n                </div> \r\n\r\n            </WaveContent>\r\n        </WaveContentContainer>\r\n\r\n        <div style={{\r\n            width: '100%', height: '30px', display: 'flex', alignItems: 'center', justifyContent: 'space-between', background: '#eeeeee'\r\n        }}>\r\n            <div style={{marginLeft: '20px', fontSize: '15px'}}>* all averages calculated using last 10 samples</div>\r\n\r\n            <div \r\n                style={{\r\n                    marginRight: '20px', \r\n                    fontSize: '15pzx',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    height: '100%',\r\n                }}\r\n                \r\n            >\r\n                Server:\r\n                <div style={{height: '10px', marginLeft: '5px', marginTop: '2px', marginRight: '5px', width: '10px', borderRadius: '5px', background: props.serverOnline ? 'green' : 'red'}} />\r\n                {props.serverOnline ? \"online\" : \"offline\" }\r\n            </div>\r\n        </div>\r\n\r\n                {/*\r\n        <BottomContent>\r\n            <COContent>\r\n                <div style={{height: '100%', aspectRatio: '1'}}>\r\n                    <BarGraph\r\n                        title={'CO2 Graph'}\r\n                        average={props.coAverage}\r\n                        value={props.coSamples[0]}\r\n                        color={colors.primary}\r\n                    />\r\n                </div>\r\n            </COContent>\r\n\r\n            <COContent>\r\n                <Button onClick={() => setDownloadOpen(true)}>Download CSV</Button>\r\n            </COContent>\r\n\r\n\r\n        </BottomContent>\r\n\r\n                */}\r\n            {\r\n                downloadOpen &&\r\n                    <DownloadScreen \r\n                        close={() => setDownloadOpen(false)}\r\n                    />\r\n            }\r\n        \r\n        \r\n    </Container>\r\n  );\r\n\r\n  function getPumpsVal() {\r\n\r\n  }\r\n\r\n    function timeString(d: Date) {\r\n        let str = `${d.toISOString().substring(0, 10)}   ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\r\n        return str\r\n    }\r\n\r\n    function pump2Setter(e:any) {\r\n        let val = e.target.value\r\n        setPumps('pump2', val)\r\n        setPump2(val)\r\n    }\r\n\r\n    function pump1Setter(e:any) {\r\n        let val = e.target.value\r\n        setPumps('pump1', val)\r\n        setPump1(val)\r\n    }\r\n\r\n    function setPumps(pumpName: string, val: number) {\r\n    \r\n        const pumpsRef = ref(db, 'Pumps/' + pumpName);\r\n\r\n        set(pumpsRef, {\r\n            pump: pumpName,\r\n            value: val,\r\n        });\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport LoginPage from './components/LoginPage'\r\nimport Dashboard from './components/Dashboard'\r\n\r\nimport db from './firebase';\r\nimport { ref, child, get, onValue } from \"firebase/database\";\r\n\r\nconst url = \"https://sensordash.000webhostapp.com/index.php\"\r\n\r\ninterface wavType {\r\n  name: string\r\n  samples: number[]\r\n  average: number\r\n}\r\n\r\nconst waveSampleTemp:wavType[] = [\r\n  {\r\n    name: '415nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '445nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '480nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '515nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '555nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '590nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '630nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '680nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: 'Clear',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: 'NIR',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n]\r\n\r\nfunction App() {\r\n  const d = new Date()\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n  const [coSamples, setCoSamples] = useState<number[]>([])\r\n  const [coAverage, setCoAverage] = useState<number>(0)\r\n\r\n  const [waveSamples, setWaveSamples] = useState(waveSampleTemp)\r\n  const [largestWave, setLargestWave] = useState(0)\r\n\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('')\r\n  const [currentTime, setCurrentTime] = useState(d)\r\n\r\n  const [serverOnline, setServerOnline] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    const sensorsRef = ref(db, 'Readings/');\r\n\r\n    onValue(sensorsRef, async (snapshot:any) => {\r\n      if (snapshot.exists()) {\r\n        let sens = snapshot.val()\r\n\r\n        let cnt = 0\r\n\r\n        let blank:number[] = []\r\n        let newCoSamples = blank.concat(coSamples)\r\n\r\n        let blank2:wavType[] = []\r\n        let newWaves = blank2.concat(waveSamples)\r\n\r\n        let senseArray:any[] = []\r\n\r\n        for (var key in sens) {\r\n          senseArray.push(sens[key])\r\n        }\r\n\r\n\r\n        for(let i = senseArray.length - 1; i >= 0; i--) {\r\n          //console.log(i)\r\n          //console.log(senseArray[i])\r\n          if(cnt === 10)\r\n            break\r\n\r\n          if(cnt === 0) {\r\n\r\n            let lastTime = getTime(senseArray[i][\"Time\"])\r\n            //console.log(lastTime)\r\n            setLastUpdated(lastTime)\r\n          }\r\n          let newCo:number = senseArray[i][\"Carbon dioxide\"]\r\n          newCoSamples.push( newCo )\r\n\r\n\r\n          newWaves[0].samples.push(senseArray[i][\"F1 415nm\"] ) \r\n          newWaves[1].samples.push(senseArray[i][\"F2 445nm\"] ) \r\n          newWaves[2].samples.push(senseArray[i][\"F3 480nm\"] ) \r\n          newWaves[3].samples.push(senseArray[i][\"F4 515nm\"] ) \r\n          newWaves[4].samples.push(senseArray[i][\"F5 555nm\"] ) \r\n          newWaves[5].samples.push(senseArray[i][\"F6 590nm\"] ) \r\n          newWaves[6].samples.push(senseArray[i][\"F7 630nm\"] ) \r\n          newWaves[7].samples.push(senseArray[i][\"F8 680nm\"] ) \r\n          newWaves[8].samples.push(senseArray[i][\"Clear\"] ) \r\n          newWaves[9].samples.push(senseArray[i][\"NIR\"] ) \r\n          \r\n          cnt++\r\n        }\r\n\r\n        setWave(newWaves)\r\n\r\n        let sampleMax = largestWave\r\n        newWaves.forEach((prop:any, index:any) => {\r\n          prop.samples.forEach((el:any, key:any) => {\r\n            if(el > sampleMax)\r\n              sampleMax = el\r\n          })\r\n        })\r\n\r\n        setLargestWave(sampleMax)\r\n\r\n        setCo(newCoSamples)\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n\r\n      updateCurrentTime()\r\n\r\n      checkServer()\r\n    })\r\n\r\n\r\n    \r\n\r\n  }, [])\r\n\r\n  return (\r\n    \r\n      !loggedIn ? \r\n        <LoginPage\r\n          setLoggedIn={setLoggedIn}\r\n        />\r\n\r\n        :\r\n\r\n        <Dashboard \r\n          coAverage={coAverage}\r\n          coSamples={coSamples}\r\n          waveSamples={waveSamples}\r\n          logout={logout}\r\n          currentTime={currentTime}\r\n          lastUpdated={lastUpdated}\r\n\r\n          largestWave={largestWave}\r\n\r\n          serverOnline={serverOnline}\r\n        />\r\n  );\r\n\r\n  async function checkServer() {\r\n    /*\r\n    let resp = await axios({\r\n      method: 'get',\r\n      url,\r\n      headers: { \r\n        \"content-type\": 'text/html',\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n  })  \r\n  */\r\n    fetch(url, {method: 'GET'})\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      console.log(json)\r\n      if(json.status === 'online')\r\n        setServerOnline(true)\r\n      else \r\n        setServerOnline(false)\r\n    })\r\n    .catch(err => {\r\n      setServerOnline(false)\r\n    })\r\n  \r\n    /*\r\n    if(resp === true.)\r\n    else\r\n    */\r\n    \r\n    return setTimeout(checkServer, 120000);\r\n  }\r\n\r\n  function updateCurrentTime() {\r\n    let d = new Date()\r\n    setCurrentTime(d)\r\n\r\n    return setTimeout(updateCurrentTime, 1000);\r\n  }\r\n\r\n  function getTime(d: string) {\r\n    let str = d.split(',')\r\n\r\n    let timeStr = str[1].split('+')\r\n    let senseTime = new Date(\"20\"+str[0])\r\n\r\n    return `${senseTime.getFullYear()}-${senseTime.getMonth() + 1}-${senseTime.getDate()}  at  ${timeStr[0]}`\r\n  }\r\n\r\n  function logout() {\r\n    setLoggedIn(false)\r\n  }\r\n\r\n  function setCo(arr:number[]) {\r\n    let total:number = 0;\r\n    arr.forEach((el:number) => {\r\n      total = total + el \r\n    })\r\n\r\n    let avg = total / arr.length\r\n\r\n    setCoSamples(arr)\r\n    setCoAverage(avg)\r\n\r\n  }\r\n\r\n  function setWave(arr:wavType[]) {\r\n    let avg:number[] = [0,0,0,0,0,0,0,0];\r\n\r\n    arr.forEach((el:wavType, index:number) => {\r\n      let total = 0\r\n      el.samples.forEach((num:number, index:number) => {\r\n        total = total + num\r\n      })\r\n      avg[index] = total/el.samples.length\r\n    })\r\n\r\n    let blank:wavType[] = []\r\n    let newWaves = blank.concat(arr)\r\n\r\n    for(let i = 0; i < newWaves.length; i++) {\r\n      newWaves[i].average = avg[i]\r\n    }\r\n\r\n    setWaveSamples(newWaves)\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}