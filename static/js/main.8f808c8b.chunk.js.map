{"version":3,"sources":["firebase.tsx","components/TextInput.tsx","components/Button.tsx","colors.js","components/LoginPage.tsx","components/BarGraph.tsx","components/DownloadScreen.tsx","components/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","Container","styled","input","TextInput","props","value","placeholder","type","onChange","setValue","div","Button","onClick","clicked","style","background","color","textColor","colors","primary","darkPurple","purple","darkBlue","blue","green","red","yellow","pink","black","lightRed","bcryptjs","require","LoginWindow","RegisterWindow","LoginPage","useState","loginOpen","setLoginOpen","users","setUsers","loginUsername","setLoginUsername","loginPassword","setLoginPassword","loginError","setLoginError","regUsername","setRegUsername","regPassword","setRegPassword","regError","setRegError","loading","setLoading","loginLoading","setLoginLoading","registerDone","setRegisterDone","timer","useEffect","setTimeout","usersRef","ref","onValue","snapshot","exists","console","log","val","newUsernames","key","username","push","clearTimeout","fontSize","fontWeight","marginBottom","e","target","height","width","display","alignItems","justifyContent","cursor","marginTop","top","position","opacity","a","userCorrect","i","length","hashIt","salt","hashLogin","password","setLoggedIn","usernameUsed","forEach","el","getSalt","passHash","genSalt","hash","hashed","BarGraph","data","labels","datasets","backgroundColor","average","options","maintainAspectRatio","plugins","legend","title","text","scales","y","min","Math","floor","max","undefined","Background","Window","Heading","Content","ContentBoxes","Labels","TextBoxes","csvData","DownloadScreen","d","Date","start","setStart","end","setEnd","error","setError","csv","setCsv","downloadCsv","setDownloadCsv","close","getDateString","getFullYear","getMonth","getDate","sensorsRef","get","then","sens","newCsv","concat","str","split","senseTime","co","nir","clear","f1","f2","f3","f4","f5","f6","f7","f8","newRow","calculateCSVData","filename","yearStr","monthStr","parseInt","toString","dayStr","finalString","colorsArr","NavBar","NavContent","WaveContentContainer","WaveContent","WaveGraphContainer","CsvButton","DateContainer","Dashboard","downloadOpen","setDownloadOpen","paddingLeft","lastUpdated","currentTime","toISOString","substring","getHours","getMinutes","getSeconds","paddingRight","logout","waveSamples","map","prop","flexShrink","name","samples","largestWave","coAverage","coSamples","marginLeft","marginRight","borderRadius","serverOnline","url","waveSampleTemp","App","loggedIn","setCoSamples","setCoAverage","setWaveSamples","setLargestWave","setLastUpdated","setCurrentTime","setServerOnline","cnt","newCoSamples","newWaves","senseArray","lastTime","getTime","newCo","setWave","sampleMax","index","setCo","updateCurrentTime","checkServer","fetch","method","response","json","status","catch","err","timeStr","arr","total","avg","num","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f808c8b.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\n/*const firebaseConfig =  {\r\n    apiKey: \"AIzaSyArcHR-u520-pvwa75P9dTqmn9Q-0xuQfk\",\r\n    authDomain: \"testsensor-50e80.firebaseapp.com\",\r\n    databaseURL: \"https://testsensor-50e80-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"testsensor-50e80\",\r\n    storageBucket: \"testsensor-50e80.appspot.com\",\r\n    messagingSenderId: \"15455856559\",\r\n    appId: \"1:15455856559:web:2b0ce1e3f3a8fd206b315a\"\r\n};\r\n*/\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBWCGso7ConB4uAv-j-QUFCg4wWHwzo_Ng\",\r\n    authDomain: \"mysensors-b8cfe.firebaseapp.com\",\r\n    databaseURL: \"https://mysensors-b8cfe-default-rtdb.firebaseio.com\",\r\n    projectId: \"mysensors-b8cfe\",\r\n    storageBucket: \"mysensors-b8cfe.appspot.com\",\r\n    messagingSenderId: \"265785378277\",\r\n    appId: \"1:265785378277:web:e3f320f541eef441f15b0c\",\r\n    measurementId: \"G-8RMGJP5T1Y\"\r\n  };\r\n  \r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst db = getDatabase(app);\r\n\r\nexport default db","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.input`\r\n  height: 100%;\r\n  width: 100%;\r\n  outline: none;\r\n  background: transparent;\r\n  border: 2px solid darkgrey;\r\n  border-radius: 5px;\r\n  padding: 5px 7px;\r\n  margin: 0px;\r\n`\r\n\r\ninterface propTypes {\r\n    value: any\r\n    placeholder: string\r\n    type: string\r\n    setValue: any\r\n}\r\n\r\n\r\nfunction TextInput(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container\r\n        value={props.value}\r\n        placeholder={props.placeholder}\r\n        type={props.type}\r\n        onChange={props.setValue}\r\n    />\r\n  );\r\n}\r\n\r\nexport default TextInput;","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Container = styled.div`\r\n  padding: 7px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`\r\n\r\ninterface propTypes {\r\n    value: string\r\n    color: string\r\n\r\n    clicked: any\r\n    textColor?:string\r\n}\r\n\r\n\r\nfunction Button(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container\r\n        \r\n        onClick={props.clicked}\r\n        style={{\r\n            background: props.color || 'lightgrey',\r\n            color: props.textColor || 'black'\r\n        }}\r\n    >\r\n        {props.value}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n","const colors = {\r\n    primary: '#FF6F3C',\r\n\r\n    darkPurple: '#3E2F5B',\r\n    purple: '#E8C7DE',\r\n\r\n    darkBlue: '#345995',\r\n    blue: '#86BBD8',\r\n    green: '#DCF2B0',\r\n    red: '#880D1E',\r\n    yellow: '#FFCF00',\r\n    pink: '#CC59D2',\r\n    black: '#262626',\r\n    lightRed: '#EF2917'\r\n\r\n}\r\n\r\nexport default colors","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nimport db from '../firebase';\r\nimport { ref, child, get, onValue, push } from \"firebase/database\";\r\nimport TextInput from './TextInput';\r\nimport Button from './Button';\r\nimport colors from '../colors';\r\nconst bcryptjs = require('bcryptjs');\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  background: #eeeeee;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst LoginWindow = styled.div`\r\n  padding: 20px 20px;\r\n  min-width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\nconst RegisterWindow = styled.div`\r\n  position: relative;\r\n  padding: 20px 20px;\r\n  min-width: 300px;\r\n  background: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\ninterface propTypes {\r\n  setLoggedIn: any\r\n}\r\n\r\nfunction LoginPage(props: propTypes) {\r\n  const [loginOpen, setLoginOpen] = useState(true)\r\n\r\n  const [users, setUsers] = useState<any[]>([])\r\n\r\n\r\n  const [loginUsername, setLoginUsername] = useState('')\r\n  const [loginPassword, setLoginPassword] = useState('')\r\n  const [loginError, setLoginError] = useState('')\r\n\r\n\r\n  const [regUsername, setRegUsername] = useState('')\r\n  const [regPassword, setRegPassword] = useState('')\r\n  const [regError, setRegError] = useState('')\r\n\r\n  const [loading, setLoading] = useState(false)\r\n  const [loginLoading, setLoginLoading] = useState(true)\r\n\r\n  const [registerDone, setRegisterDone] = useState(false)\r\n\r\n  let timer:any = null\r\n\r\n  useEffect(() => {\r\n    timer = setTimeout(() => {\r\n      setLoginLoading(false)\r\n    }, 1000)\r\n\r\n    const usersRef = ref(db, 'Users/');\r\n\r\n    onValue(usersRef, (snapshot:any) => {\r\n      if(snapshot.exists()) {\r\n        console.log(snapshot.val())\r\n\r\n        let users = snapshot.val()\r\n        let newUsernames = []\r\n\r\n        for (var key in users) {\r\n          let username:string = users[key]\r\n          newUsernames.push(username)\r\n        }\r\n        setUsers(newUsernames)\r\n      }\r\n\r\n      \r\n    })\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n  return (\r\n    <Container>\r\n\r\n      {\r\n        loginOpen ?\r\n          <LoginWindow>\r\n          <div style={{fontSize: '25px', fontWeight: 'bold', marginBottom: '20px'}}>Login</div>\r\n\r\n          <TextInput\r\n            value={loginUsername}\r\n            setValue={setLoginUsernameHelper}\r\n            type={'text'}\r\n            placeholder={\"username\"}\r\n          />\r\n\r\n          <div style={{height: '20px'}} />\r\n\r\n          <TextInput\r\n            value={loginPassword}\r\n            setValue={setLoginPasswordHelper}\r\n            type={'password'}\r\n            placeholder={\"password\"}\r\n          />\r\n\r\n          <div style={{height: '40px', width: '100%', display:'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n          {loginError}\r\n          </div>\r\n\r\n          <Button \r\n            clicked={login}\r\n            value={'login'}\r\n            color={colors.primary}\r\n            textColor={'white'}\r\n          />\r\n\r\n          <div onClick={() => setLoginOpen(false)} style={{cursor: 'pointer', marginTop: '10px'}}>register</div>\r\n\r\n          {\r\n            loginLoading &&\r\n              <div \r\n                style={{\r\n                  top: '0px',\r\n                  position: 'absolute',\r\n                  height: '100%',\r\n                  width: '100%',\r\n                  background: 'black',\r\n                  opacity: 0.6\r\n                }} \r\n              />\r\n          }\r\n          </LoginWindow>\r\n\r\n          :\r\n\r\n          <RegisterWindow>\r\n            <div style={{fontSize: '25px', fontWeight: 'bold', marginBottom: '20px'}}>Register</div>\r\n\r\n            <TextInput\r\n              value={regUsername}\r\n              setValue={setRegUsernameHelper}\r\n              type={'text'}\r\n              placeholder={\"username\"}\r\n            />\r\n\r\n            <div style={{height: '20px'}} />\r\n\r\n            <TextInput\r\n              value={regPassword}\r\n              setValue={setRegPasswordHelper}\r\n              type={'password'}\r\n              placeholder={\"password\"}\r\n            />\r\n\r\n            <div style={{height: '40px', width: '100%', display:'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n            {regError}\r\n            </div>\r\n\r\n            <Button \r\n              clicked={register}\r\n              value={'register'}\r\n              color={colors.primary}\r\n              textColor={'white'}\r\n            />\r\n\r\n            <div onClick={() => setLoginOpen(true)} style={{cursor: 'pointer', marginTop: '10px'}}>go to login</div>\r\n\r\n            {\r\n              loading &&\r\n                <div \r\n                  style={{\r\n                    top: '0px',\r\n                    position: 'absolute',\r\n                    height: '100%',\r\n                    width: '100%',\r\n                    background: 'black',\r\n                    opacity: 0.6\r\n                  }} \r\n                />\r\n            }\r\n\r\n            {\r\n              registerDone &&\r\n                <div \r\n                  style={{\r\n                    position: 'absolute',\r\n                    height: '100%',\r\n                    width: '100%',\r\n                    top: '0px',\r\n                    background: 'white',\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    fontSize: '25px',\r\n                    fontWeight: 'bold',\r\n                  }}\r\n                >\r\n                  user registered\r\n                </div>\r\n            }\r\n\r\n          </RegisterWindow>\r\n      }\r\n\r\n    </Container>\r\n  );\r\n\r\n  function setLoginUsernameHelper(e:any) {\r\n    setLoginUsername(e.target.value)\r\n  }\r\n  function setLoginPasswordHelper(e:any) {\r\n    setLoginPassword(e.target.value)\r\n  }\r\n\r\n  function setRegUsernameHelper(e:any) {\r\n    setRegUsername(e.target.value)\r\n  }\r\n  function setRegPasswordHelper(e:any) {\r\n    setRegPassword(e.target.value)\r\n  }\r\n\r\n  async function login() {\r\n    console.log(users)\r\n    setLoginError('')\r\n\r\n    let userCorrect = false\r\n\r\n    for(let i = 0; i < users.length; i++) {\r\n      if(users[i].username === loginUsername) {\r\n        let hashLogin = await hashIt(loginPassword, users[i].salt)\r\n        console.log(hashLogin)\r\n\r\n        if(hashLogin === users[i].password) {\r\n          userCorrect = true\r\n          props.setLoggedIn(true)\r\n          return\r\n        }\r\n      }\r\n    }\r\n\r\n    if(!userCorrect)\r\n      setLoginError('username or password incorrect')\r\n  }\r\n\r\n  async function register() {\r\n    setLoading(true)\r\n    setRegError('')\r\n\r\n    let usernameUsed = false\r\n    users.forEach((el:any) => {\r\n      if(el.username === regUsername) {\r\n        usernameUsed = true\r\n      }\r\n    })\r\n\r\n    if(usernameUsed) {\r\n      setLoading(false)\r\n\r\n      setRegError('username used')\r\n      return\r\n    }\r\n\r\n    let salt = await getSalt()\r\n    let passHash = await hashIt(regPassword, salt)\r\n\r\n    const usersRef = ref(db, 'Users/');\r\n\r\n    push(usersRef, {\r\n      username: regUsername,\r\n      password: passHash,\r\n      salt : salt\r\n    });\r\n    setRegisterDone(true)\r\n\r\n    timer = setTimeout(() => {\r\n      setLoading(false)\r\n      setLoginOpen(true)\r\n      setRegisterDone(false)\r\n    }, 2000)\r\n  }\r\n\r\n  async function getSalt() {\r\n    const salt = await bcryptjs.genSalt(6);\r\n    return salt\r\n  }\r\n  async function hashIt(password:string, salt:any){\r\n    const hashed = await bcryptjs.hash(password, salt);\r\n    return hashed\r\n  }\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\ninterface propTypes {\r\n    title: string\r\n    average: number\r\n    value: number\r\n    color: string\r\n    min?: number\r\n    max?: number\r\n}\r\n\r\n\r\nfunction BarGraph(props:propTypes) {\r\n\r\n\r\n  return (\r\n    <Container>\r\n        <Bar \r\n            data={\r\n                {\r\n                    labels: ['current', 'average'],\r\n                    datasets: [{\r\n                        backgroundColor: [props.color, 'lightgrey'],\r\n                        data: [\r\n                            props.value,\r\n                            props.average\r\n                        ]\r\n                    }]\r\n                }\r\n            } \r\n            options={\r\n                {\r\n                    maintainAspectRatio: false,\r\n                    plugins:{   \r\n                        legend: {\r\n                          display: false\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: props.title   \r\n                        }\r\n                    },\r\n                    scales: {\r\n                        y: {\r\n                            min: props.min ? Math.floor(props.min) : 0,\r\n                            max: props.max ? Math.floor(props.max) : undefined   \r\n                        }\r\n                    }\r\n                }\r\n            } \r\n            width={100} \r\n            height={100}\r\n        />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default BarGraph;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport { Bar } from 'react-chartjs-2';\r\nimport TextInput from './TextInput';\r\nimport Button from './Button';\r\nimport { ref, child, get } from \"firebase/database\";\r\nimport db from '../firebase';\r\nimport { CSVDownload } from \"react-csv\";\r\n\r\nconst Container = styled.div`\r\n    position: fixed;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst Background = styled.div`\r\n    position: absolute;\r\n    height: 100%;\r\n    width: 100%;\r\n    background: black;\r\n    opacity: 0.6;\r\n    z-index: 0;\r\n`\r\n\r\nconst Window = styled.div`\r\n    z-index: 1;\r\n    height: 300px;\r\n    max-height: calc(100% - 100px);\r\n    max-width: calc(100% - 100px);\r\n    width: 500px;\r\n    background: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border-radius: 10px;\r\n`\r\nconst Heading = styled.div`\r\n    height: 20%;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n\r\n`\r\n\r\nconst Content = styled.div`\r\n    width: calc(100% - 100px);\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n\r\n`\r\n\r\nconst ContentBoxes = styled.div`\r\n    width: calc(50% - 20px);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center\r\n`\r\n\r\nconst Labels = styled.div`\r\n    margin: 20px 0px;\r\n`\r\n\r\nconst TextBoxes = styled.div`\r\n    width: calc(100% - 20px);\r\n`\r\n\r\nconst csvData:any = [\r\n    [\"time\", \"CO2\", \"NIR\", \"Clear\", \"F1 415nm\", \"F2 445nm\", \"F3 480nm\", \"F4 515nm\", \"F5 555nm\", \"F6 590nm\", \"F7 630nm\", \"F8 680nm\"],\r\n];\r\n\r\ninterface propTypes {\r\n    close: any\r\n}\r\n\r\n\r\nfunction DownloadScreen(props:propTypes) {\r\n    const d = new Date()\r\n    const [start, setStart] = useState(d)\r\n    const [end, setEnd] = useState(d)\r\n    const [error, setError] = useState('')\r\n\r\n    const [csv, setCsv] = useState<any>(csvData)\r\n    const [downloadCsv, setDownloadCsv] = useState(false)\r\n\r\n    return (\r\n        <Container>\r\n            <Background \r\n                onClick={props.close}\r\n            />\r\n            \r\n            <Window>\r\n                <Heading>Download CSV</Heading>\r\n\r\n                <Content>\r\n                    <ContentBoxes>\r\n                        <Labels>from</Labels>\r\n                        <TextBoxes>\r\n                            <TextInput\r\n                                value={getDateString(start)}\r\n                                placeholder={\"dd/mm/yy\"}\r\n                                type={'date'}\r\n                                setValue={setStartDate}\r\n                            />\r\n                        </TextBoxes>\r\n\r\n                    </ContentBoxes>\r\n\r\n                    <div style={{width: '40px'}} />\r\n\r\n                    <ContentBoxes>\r\n                        <Labels>to</Labels>\r\n                        <TextBoxes>\r\n                            <TextInput\r\n                                value={getDateString(end)}\r\n                                placeholder={\"dd/mm/yy\"}\r\n                                type={'date'}\r\n                                setValue={setEndDate}\r\n\r\n                            />\r\n                        </TextBoxes>\r\n\r\n                    </ContentBoxes>\r\n\r\n                </Content>\r\n\r\n                <div style={{marginTop: '10px'}}>\r\n\r\n                    {error}\r\n                </div>\r\n\r\n                <div style={{marginTop: '20px', marginBottom: '20px'}}>\r\n\r\n                    <Button \r\n                        value={\"download csv\"}\r\n                        clicked={() => calculateCSVData()}\r\n                        color={\"lightgrey\"}\r\n                    />\r\n                </div>\r\n                \r\n\r\n            </Window>\r\n\r\n            {\r\n                downloadCsv &&\r\n                    <CSVDownload data={csv} target=\"_blank\" filename={\"wavedata.csv\"} />\r\n\r\n            }\r\n\r\n        </Container>\r\n    );\r\n\r\n    function getDateString(val: Date) {\r\n\r\n        let yearStr = val.getFullYear()\r\n        let monthStr:string = `${parseInt(val.getMonth().toString()) + 1}`\r\n        let dayStr:string = val.getDate().toString()\r\n\r\n        if( parseInt(monthStr) < 10)\r\n            monthStr = \"0\" + monthStr\r\n        if( parseInt(dayStr) < 10)\r\n            dayStr = \"0\" + dayStr\r\n\r\n        let finalString =  yearStr+'-'+monthStr+'-'+dayStr\r\n\r\n        console.log(finalString)\r\n        return finalString\r\n\r\n\r\n\r\n    }\r\n\r\n    function setStartDate(val: any) {\r\n        console.log(end.getFullYear()+'-'+end.getMonth()+'-'+end.getDate())\r\n        let d = new Date(val.target.value)\r\n        setStart(d)\r\n    }\r\n    function setEndDate(val: any) {\r\n        console.log(val.target.value)\r\n        let d = new Date(val.target.value)\r\n        console.log(d)\r\n        setEnd(d)\r\n    }\r\n\r\n    function calculateCSVData() {\r\n        const sensorsRef = ref(db, 'Sensors/');\r\n        setDownloadCsv(false)\r\n\r\n        if(start > end) {\r\n            setError('start date must be before end date')\r\n\r\n            return\r\n        }\r\n\r\n\r\n        get( sensorsRef ).then((snapshot:any) => {\r\n            if (snapshot.exists()) {\r\n                setError('')\r\n\r\n                console.log(snapshot.val())\r\n                let sens = snapshot.val()\r\n\r\n                let newCsv:any = [].concat(csvData)\r\n                console.log(newCsv)\r\n\r\n                for (var key in sens) {\r\n                    let sensTimeStr = sens[key][\"Time\"]\r\n                    let str = sensTimeStr.split(',')\r\n                    let senseTime = new Date(\"20\"+str[0])\r\n                    console.log(senseTime)\r\n\r\n                    if(senseTime <= end && senseTime >= start) {\r\n                        let co:number = sens[key][\"Carbon dioxide\"]\r\n                        let nir:number = sens[key][\"NIR\"] * 100\r\n                        let clear:number = sens[key][\"Clear\"] * 100\r\n                        let f1:number = sens[key][\"F1 415nm\"] * 100\r\n                        let f2:number = sens[key][\"F2 445nm\"] * 100\r\n                        let f3:number = sens[key][\"F3 480nm\"] * 100\r\n                        let f4:number = sens[key][\"F4 515nm\"] * 100\r\n                        let f5:number = sens[key][\"F5 555nm\"] * 100\r\n                        let f6:number = sens[key][\"F6 590nm\"] * 100\r\n                        let f7:number = sens[key][\"F7 630nm\"] * 100\r\n                        let f8:number = sens[key][\"F8 680nm\"] * 100\r\n                        let time:string = sens[key][\"Time\"]\r\n                        \r\n                        let newRow:any = [\r\n                            time,\r\n                            co,\r\n                            nir,\r\n                            clear,\r\n                            f1,\r\n                            f2,\r\n                            f3,\r\n                            f4,\r\n                            f5,\r\n                            f6,\r\n                            f7,\r\n                            f8\r\n                        ]\r\n                        newCsv.push(newRow)\r\n                    }\r\n                }   \r\n                console.log(newCsv.length)\r\n                if(newCsv.length > 1) {\r\n                    setCsv(newCsv)\r\n                    setDownloadCsv(true)\r\n                }\r\n\r\n                else {\r\n                    setError('no data in this time period')\r\n                }\r\n            }\r\n\r\n            else {\r\n                setError('server error')\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default DownloadScreen;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport BarGraph from './BarGraph';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\nimport colors from '../colors'\r\nimport DownloadScreen from './DownloadScreen';\r\nimport Button from './Button';\r\n\r\n\r\nconst colorsArr = [colors.darkPurple, colors.purple, colors.blue, colors.green, colors.darkBlue, colors.primary, colors.lightRed, colors.red, 'black', 'black']\r\n\r\nconst Container = styled.div`\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`\r\n\r\nconst NavBar = styled.div`\r\n  height: 60px;\r\n  width: 100%;\r\n  display: flex;\r\n  background: #eeeeee;\r\n  flex-shrink: 0;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`\r\n\r\nconst NavContent = styled.div`\r\n  height: 100%;\r\n  width: calc(100% / 3);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst WaveContentContainer = styled.div`\r\n    background: #eeeeee;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n`\r\n\r\nconst WaveContent = styled.div`\r\n    width: calc(100% - 40px);\r\n    height: calc(100% - 0px);\r\n    background: white;\r\n    display: flex;\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    flex-wrap:wrap;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n`\r\n\r\nconst WaveGraphContainer = styled.div`\r\n    width: calc(100% - 50px);\r\n    height: calc(100% - 50px);\r\n    flex-shrink: 0;\r\n`\r\n\r\nconst CsvButton = styled.div`\r\n  position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    font-size: 25px;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: center;\r\n    fle-direction: column;\r\n    align-items: center;\r\n    transition: all 0.3s ease;\r\n    &:hover {\r\n        color: white;\r\n        background: ${colors.primary};\r\n    }\r\n \r\n`\r\n\r\nconst DateContainer = styled.div`\r\n    font-size: 15px;\r\n`\r\ninterface propTypes {\r\n    coAverage: number\r\n    coSamples: number[]\r\n    waveSamples: any\r\n    logout: any\r\n    currentTime: Date\r\n    lastUpdated: string\r\n    largestWave: number\r\n    serverOnline: boolean\r\n}\r\n\r\n\r\nfunction Dashboard(props:propTypes) {\r\n    const [downloadOpen, setDownloadOpen] = useState(false)\r\n\r\n  return (\r\n    <Container>\r\n        <NavBar>\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'flex-start',\r\n                    paddingLeft: '20px',\r\n                    fontWeight: 'bold'\r\n                }}\r\n            >\r\n                \r\n                <DateContainer>\r\n                    Last updated: \r\n                    <div style={{fontSize: '20px'}}>\r\n                        {props.lastUpdated}\r\n                    </div>\r\n\r\n                </DateContainer>\r\n            </NavContent>\r\n\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'center',\r\n                    fontWeight: 'bold'\r\n\r\n                }}\r\n            >\r\n                <DateContainer>\r\n                    Current time: \r\n                    <div style={{fontSize: '20px'}}>\r\n                        {timeString(props.currentTime)}\r\n                    </div>\r\n\r\n                </DateContainer>\r\n            </NavContent>\r\n\r\n            <NavContent\r\n                style={{\r\n                    justifyContent: 'flex-end',\r\n                    paddingRight: '20px'\r\n                }}\r\n            >\r\n                <Button \r\n                    value={'logout'}\r\n                    clicked={props.logout}\r\n                    color={colors.primary}\r\n                    textColor={'white'}\r\n                />\r\n            </NavContent>\r\n        </NavBar>\r\n        \r\n        <WaveContentContainer>\r\n            <WaveContent>\r\n                {\r\n                    props.waveSamples.map((prop:any, key:number) => \r\n                        <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                            <WaveGraphContainer>\r\n                                <BarGraph\r\n                                    title={prop.name}\r\n                                    average={prop.average}\r\n                                    value={prop.samples[0]}\r\n                                    color={colorsArr[key]}\r\n                                    min={0}\r\n                                    max={props.largestWave * 1.1}\r\n                                />\r\n                            </WaveGraphContainer>\r\n                        </div> \r\n                    )\r\n                }\r\n\r\n                <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <WaveGraphContainer>\r\n                        <BarGraph\r\n                            title={'CO2 Graph'}\r\n                            average={props.coAverage}\r\n                            value={props.coSamples[0]}\r\n                            color={colors.green}\r\n                        />\r\n                    </WaveGraphContainer>\r\n                </div> \r\n\r\n                <div style={{width: 'calc(100% / 4)', height: 'calc(100% / 3)', flexShrink: 0, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                        \r\n                    <WaveGraphContainer>\r\n                        <CsvButton \r\n                            onClick={() => setDownloadOpen(true)}\r\n                        >\r\n                            <div>Download</div>\r\n                            <div>CSV</div>\r\n                        </CsvButton>\r\n                    </WaveGraphContainer>\r\n                </div> \r\n\r\n            </WaveContent>\r\n        </WaveContentContainer>\r\n\r\n        <div style={{\r\n            width: '100%', height: '30px', display: 'flex', alignItems: 'center', justifyContent: 'space-between', background: '#eeeeee'\r\n        }}>\r\n            <div style={{marginLeft: '20px', fontSize: '15px'}}>* all averages calculated using last 10 samples</div>\r\n\r\n            <div \r\n                style={{\r\n                    marginRight: '20px', \r\n                    fontSize: '15pzx',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    height: '100%',\r\n                }}\r\n                \r\n            >\r\n                Server:\r\n                <div style={{height: '10px', marginLeft: '5px', marginTop: '2px', marginRight: '5px', width: '10px', borderRadius: '5px', background: props.serverOnline ? 'green' : 'red'}} />\r\n                {props.serverOnline ? \"online\" : \"offline\" }\r\n            </div>\r\n        </div>\r\n\r\n                {/*\r\n        <BottomContent>\r\n            <COContent>\r\n                <div style={{height: '100%', aspectRatio: '1'}}>\r\n                    <BarGraph\r\n                        title={'CO2 Graph'}\r\n                        average={props.coAverage}\r\n                        value={props.coSamples[0]}\r\n                        color={colors.primary}\r\n                    />\r\n                </div>\r\n            </COContent>\r\n\r\n            <COContent>\r\n                <Button onClick={() => setDownloadOpen(true)}>Download CSV</Button>\r\n            </COContent>\r\n\r\n\r\n        </BottomContent>\r\n\r\n                */}\r\n            {\r\n                downloadOpen &&\r\n                    <DownloadScreen \r\n                        close={() => setDownloadOpen(false)}\r\n                    />\r\n            }\r\n        \r\n        \r\n    </Container>\r\n  );\r\n\r\n  function timeString(d: Date) {\r\n    let str = `${d.toISOString().substring(0, 10)}   ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\r\n    return str\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n\r\n","import React, {useEffect, useState, useContext} from 'react';\r\nimport styled from 'styled-components'\r\nimport LoginPage from './components/LoginPage'\r\nimport Dashboard from './components/Dashboard'\r\n\r\nimport db from './firebase';\r\nimport { ref, child, get, onValue } from \"firebase/database\";\r\nimport axios from 'axios'\r\n\r\nconst url = \"https://sensordash.000webhostapp.com/index.php\"\r\n\r\ninterface wavType {\r\n  name: string\r\n  samples: number[]\r\n  average: number\r\n}\r\n\r\nconst waveSampleTemp:wavType[] = [\r\n  {\r\n    name: '415nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '445nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '480nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '515nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '555nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '590nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '630nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: '680nm',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: 'Clear',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n  {\r\n    name: 'NIR',\r\n    samples: [],\r\n    average: 0,\r\n  },\r\n]\r\n\r\nfunction App() {\r\n  const d = new Date()\r\n  const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n  const [coSamples, setCoSamples] = useState<number[]>([])\r\n  const [coAverage, setCoAverage] = useState<number>(0)\r\n\r\n  const [waveSamples, setWaveSamples] = useState(waveSampleTemp)\r\n  const [largestWave, setLargestWave] = useState(0)\r\n\r\n\r\n  const [lastUpdated, setLastUpdated] = useState('')\r\n  const [currentTime, setCurrentTime] = useState(d)\r\n\r\n  const [serverOnline, setServerOnline] = useState(false)\r\n\r\n\r\n  useEffect(() => {\r\n    const sensorsRef = ref(db, 'Readings/');\r\n\r\n    onValue(sensorsRef, async (snapshot:any) => {\r\n      if (snapshot.exists()) {\r\n        let sens = snapshot.val()\r\n        console.log(sens)\r\n\r\n        let cnt = 0\r\n\r\n        let blank:number[] = []\r\n        let newCoSamples = blank.concat(coSamples)\r\n\r\n        let blank2:wavType[] = []\r\n        let newWaves = blank2.concat(waveSamples)\r\n\r\n        let senseArray:any[] = []\r\n\r\n        for (var key in sens) {\r\n          senseArray.push(sens[key])\r\n        }\r\n\r\n\r\n        for(let i = senseArray.length - 1; i >= 0; i--) {\r\n          console.log(i)\r\n          console.log(senseArray[i])\r\n          if(cnt === 10)\r\n            break\r\n\r\n          if(cnt === 0) {\r\n\r\n            let lastTime = getTime(senseArray[i][\"Time\"])\r\n            console.log(lastTime)\r\n            setLastUpdated(lastTime)\r\n          }\r\n          let newCo:number = senseArray[i][\"Carbon dioxide\"]\r\n          newCoSamples.push( newCo )\r\n\r\n\r\n          newWaves[0].samples.push(senseArray[i][\"F1 415nm\"] ) \r\n          newWaves[1].samples.push(senseArray[i][\"F2 445nm\"] ) \r\n          newWaves[2].samples.push(senseArray[i][\"F3 480nm\"] ) \r\n          newWaves[3].samples.push(senseArray[i][\"F4 515nm\"] ) \r\n          newWaves[4].samples.push(senseArray[i][\"F5 555nm\"] ) \r\n          newWaves[5].samples.push(senseArray[i][\"F6 590nm\"] ) \r\n          newWaves[6].samples.push(senseArray[i][\"F7 630nm\"] ) \r\n          newWaves[7].samples.push(senseArray[i][\"F8 680nm\"] ) \r\n          newWaves[8].samples.push(senseArray[i][\"Clear\"] ) \r\n          newWaves[9].samples.push(senseArray[i][\"NIR\"] ) \r\n          \r\n          cnt++\r\n        }\r\n\r\n        setWave(newWaves)\r\n\r\n        let sampleMax = largestWave\r\n        newWaves.forEach((prop:any, index:any) => {\r\n          prop.samples.forEach((el:any, key:any) => {\r\n            if(el > sampleMax)\r\n              sampleMax = el\r\n          })\r\n        })\r\n\r\n        setLargestWave(sampleMax)\r\n\r\n        setCo(newCoSamples)\r\n      } else {\r\n        console.log(\"No data available\");\r\n      }\r\n\r\n      updateCurrentTime()\r\n\r\n      checkServer()\r\n    })\r\n\r\n\r\n    \r\n\r\n  }, [])\r\n\r\n  return (\r\n    \r\n      !loggedIn ? \r\n        <LoginPage\r\n          setLoggedIn={setLoggedIn}\r\n        />\r\n\r\n        :\r\n\r\n        <Dashboard \r\n          coAverage={coAverage}\r\n          coSamples={coSamples}\r\n          waveSamples={waveSamples}\r\n          logout={logout}\r\n          currentTime={currentTime}\r\n          lastUpdated={lastUpdated}\r\n\r\n          largestWave={largestWave}\r\n\r\n          serverOnline={serverOnline}\r\n        />\r\n  );\r\n\r\n  async function checkServer() {\r\n    /*\r\n    let resp = await axios({\r\n      method: 'get',\r\n      url,\r\n      headers: { \r\n        \"content-type\": 'text/html',\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n      },\r\n  })  \r\n  */\r\n    fetch(url, {method: 'GET'})\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      console.log(json)\r\n      if(json.status === 'online')\r\n        setServerOnline(true)\r\n      else \r\n        setServerOnline(false)\r\n    })\r\n    .catch(err => {\r\n      setServerOnline(false)\r\n    })\r\n  \r\n    /*\r\n    if(resp === true.)\r\n    else\r\n    */\r\n    \r\n    return setTimeout(checkServer, 120000);\r\n  }\r\n\r\n  function updateCurrentTime() {\r\n    let d = new Date()\r\n    setCurrentTime(d)\r\n\r\n    return setTimeout(updateCurrentTime, 1000);\r\n  }\r\n\r\n  function getTime(d: string) {\r\n    let str = d.split(',')\r\n\r\n    let timeStr = str[1].split('+')\r\n    let senseTime = new Date(\"20\"+str[0])\r\n\r\n    return senseTime.toISOString().substring(0, 10) + \"  at  \" + timeStr[0]\r\n  }\r\n\r\n  function logout() {\r\n    setLoggedIn(false)\r\n  }\r\n\r\n  function setCo(arr:number[]) {\r\n    let total:number = 0;\r\n    arr.forEach((el:number) => {\r\n      total = total + el \r\n    })\r\n\r\n    let avg = total / arr.length\r\n\r\n    setCoSamples(arr)\r\n    setCoAverage(avg)\r\n\r\n  }\r\n\r\n  function setWave(arr:wavType[]) {\r\n    let avg:number[] = [0,0,0,0,0,0,0,0];\r\n\r\n    arr.forEach((el:wavType, index:number) => {\r\n      let total = 0\r\n      el.samples.forEach((num:number, index:number) => {\r\n        total = total + num\r\n      })\r\n      avg[index] = total/el.samples.length\r\n    })\r\n\r\n    let blank:wavType[] = []\r\n    let newWaves = blank.concat(arr)\r\n\r\n    for(let i = 0; i < newWaves.length; i++) {\r\n      newWaves[i].average = avg[i]\r\n    }\r\n\r\n    setWaveSamples(newWaves)\r\n\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}